name: Deploy and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Install and configure Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.1
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Test with Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform
          framework: terraform 
      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init
      - name: Provision infrastructure
        run: |
          terraform apply --auto-approve
  test:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Install Node.js
        uses: actions/setup-node@v2.3.0
        with:
          node-version: '14.x'
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          npm install 
      - name: Create .env file
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
        run: |
          echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> .env
          echo "AWS_REGION=${AWS_REGION}" >> .env
          echo "API_BASE_URL=${API_BASE_URL}" >> .env
      - name: Run Mocha tests
        run: npm run test
      - name: Run K6 load tests
        run: k6 run loadtests
      - name: Swap blue/green deployment
        if: ${{ success() && steps.k6.outputs.overall_result === 'successful' }}
        run: |
          aws ecs update-service --cluster ${{ secrets.CLUSTER_NAME }} --service ${{ secrets.SERVICE_NAME }} --force-new-deployment
