# name: Deploy and Test

# on:
#   push:
#     branches:
#       - main
#     paths:
#       - 'web/**'
#   pull_request:
#     branches:
#       - main
#     paths:
#       - 'web/**'
#   workflow_dispatch:

# jobs:
#   build:
#     environment: Development
#     runs-on: ubuntu-latest
#     steps:
#       - name: Install Node.js
#         uses: actions/setup-node@v2.3.0
#         with:
#           node-version: '16.x'
          
#       - name: Checkout code
#         uses: actions/checkout@v2
        
#       - name: Install dependencies
#         run: |
#           npm install 
#         working-directory: web
          
#       - name: Create testing .env file
#         run: |
#           echo "GCP_PROJECT_ID=${GCP_PROJECT_ID}" >> .env
#           echo "GCP_KEY_FILE_NAME=${GCP_KEY_FILE_NAME}" >> .env
#           echo "GCP_USE_EMULATOR=${GCP_USE_EMULATOR}" >> .env
#           echo "DATASTORE_DATASET=${DATASTORE_DATASET}" >> .env
#           echo "DATASTORE_EMULATOR_HOST=${DATASTORE_EMULATOR_HOST}" >> .env
#           echo "DATASTORE_EMULATOR_HOST_PATH=${DATASTORE_EMULATOR_HOST_PATH}" >> .env
#           echo "DATASTORE_HOST=${DATASTORE_HOST}" >> .env
#           echo "DATASTORE_PROJECT_ID=${DATASTORE_PROJECT_ID}" >> .env
#         env:
#           GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
#           GCP_KEY_FILE_NAME: ${{ vars.GCP_KEY_FILE_NAME }}
#           GCP_USE_EMULATOR: true
#           DATASTORE_DATASET: ${{ secrets.GCP_PROJECT_ID }}
#           DATASTORE_EMULATOR_HOST: ${{ vars.DATASTORE_EMULATOR_HOST }}
#           DATASTORE_EMULATOR_HOST_PATH: ${{ vars.DATASTORE_EMULATOR_HOST_PATH }}
#           DATASTORE_HOST: ${{ vars.DATASTORE_HOST }}
#           DATASTORE_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
#         working-directory: web
        
#       - name: Install GCP CLI
#         run: |
#           curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-430.0.0-linux-x86_64.tar.gz
#           tar -xf google-cloud-cli-430.0.0-linux-x86_64.tar.gz
#           sudo ./google-cloud-sdk/install.sh
#           sudo sed -i -e 's/true/false/' /usr/lib/google-cloud-sdk/lib/googlecloudsdk/core/config.json

#       #- name: Install Java JRE
#       #  run: |
#       #    sudo apt install default-jre
#       #    sudo apt install openjdk-8-jre  

#       - name: Configure GCP CLI
#         run: |      
#           gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
#         working-directory: web
        
#       #- name: Install datastore emulator component
#       #  run: |      
#       #    sudo gcloud components install cloud-datastore-emulator
#       #  working-directory: web

#       #- name: Start local datastore emulator
#       #  run: |      
#       #    gcloud beta emulators datastore start --no-store-on-disk --quiet &
#       #  working-directory: web
#       #  env:
#       #    GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
#       #    GCP_KEY_FILE_NAME: ${{ vars.GCP_KEY_FILE_NAME }}
#       #    DATASTORE_DATASET: ${{ secrets.GCP_PROJECT_ID }}
#       #    DATASTORE_EMULATOR_HOST: ${{ vars.DATASTORE_EMULATOR_HOST }}
#       #    DATASTORE_EMULATOR_HOST_PATH: ${{ vars.DATASTORE_EMULATOR_HOST_PATH }}
#       #    DATASTORE_HOST: ${{ vars.DATASTORE_HOST }}
#       #    DATASTORE_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
   
#       #- name: Run Mocha tests
#       #  run: |
#       #    npm run test
#       #  working-directory: web
                
#       - name: Authenticate with Google Cloud
#         env:
#           GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
#           GCP_KEY_FILE_NAME: ${{ vars.GCP_KEY_FILE_NAME }}
#         run: |
#           echo "$GOOGLE_APPLICATION_CREDENTIALS" > ${{ vars.GCP_KEY_FILE_NAME }}.json
#           gcloud auth activate-service-account --key-file=${{ vars.GCP_KEY_FILE_NAME }}.json
 
#       - name: Sample
#         env:
#           GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
#         run: |
#           echo "$GOOGLE_APPLICATION_CREDENTIALS" > ${{ vars.GCP_KEY_FILE_NAME }}.json
#         working-directory: web
      
#       - name: Delete testing .env file
#         run: |
#           rm .env
#         working-directory: web

#       - name: Create production .env file
#         run: |
#           echo "GCP_PROJECT_ID=${GCP_PROJECT_ID}" >> .env
#           echo "GCP_KEY_FILE_NAME=${GCP_KEY_FILE_NAME}" >> .env
#           echo "GCP_USE_EMULATOR=${GCP_USE_EMULATOR}" >> .env
#         env:
#           GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
#           GCP_KEY_FILE_NAME: ${{ vars.GCP_KEY_FILE_NAME }}
#           GCP_USE_EMULATOR: false
#         working-directory: web
        
#       - name: Get Latest Version Number
#         id: get_version
#         run: |
#           VERSION_COUNT=$(gcloud app versions list --service=default --format="value(VERSION.ID)" --sort-by="~VERSION.ID" | wc -l)
#           NEXT_VERSION=$((VERSION_COUNT + 1))
#           echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV

#       - name: Deploy to GCP App Engine
#         run: |
#           gcloud app deploy --version=${NEXT_VERSION} --no-promote --no-stop-previous-version
#         working-directory: web
      
#       #- name: Install K6
#       #  run: |
#       #    sudo gpg -k
#       #    sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
#       #    echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
#       #    sudo apt-get update
#       #    sudo apt-get install k6
        
#       #- name: Run K6 load tests
#       #  run: |
#       #    k6 run --env API_BASE_URL=${NEXT_VERSION}-dot-${GCP_PROJECT_ID}.uc.r.appspot.com test/*.loadtest*.js
#       #  working-directory: web

#       - name: Swap App Engine versions
#         run: | 
#           gcloud app services set-traffic default --splits=${NEXT_VERSION}=1 --quiet

name: Test and deploy API

on:
  push:
    branches:
      - main
    paths:
      - 'web/**'
  pull_request:
    branches:
      - main
    paths:
      - 'web/**'
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    environment: Development
    steps:
      - name: Install Node.js
        uses: actions/setup-node@v2.3.0
        with:
          node-version: '16.x'
          
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Install dependencies
        run: npm install
        working-directory: web

      # - name: Install Java JRE
      #  run: |
      #    sudo apt install default-jre
      #    sudo apt install openjdk-8-jre  

      # - name: Install datastore emulator component
      #  run: |      
      #    sudo gcloud components install cloud-datastore-emulator
      #  working-directory: web

      - name: Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: revolut-api
          path: ./
          if-no-files-found: error
          retention-days: 1
    
  test:
    needs: setup
    environment: Development
    runs-on: ubuntu-latest
    steps:

      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.1
        with:
          name: revolut-api
          path: ./

      - name: Install GCP CLI
        run: |
          curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-430.0.0-linux-x86_64.tar.gz
          tar -xf google-cloud-cli-430.0.0-linux-x86_64.tar.gz
          sudo ./google-cloud-sdk/install.sh
          sudo sed -i -e 's/true/false/' /usr/lib/google-cloud-sdk/lib/googlecloudsdk/core/config.json

      - name: Configure GCP CLI
        run: gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        working-directory: web

      - name: Generate GCP credentials
        run: |
          echo "$GCP_CREDENTIALS" > ${{ vars.GCP_KEY_FILE_NAME }}.json
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        working-directory: web

      - name: Authenticate with Google Cloud
        run: |
          gcloud auth activate-service-account --key-file=./web/${{ secrets.GCP_KEY_FILE_NAME }}.json    

      - name: Create testing .env file
        run: |
          echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> .env
          echo "GCP_KEY_FILE_NAME=${{ secrets.GCP_KEY_FILE_NAME }}" >> .env
          echo "GCP_USE_EMULATOR=${{ secrets.GCP_USE_EMULATOR }}" >> .env
          echo "DATASTORE_DATASET=${{ secrets.GCP_PROJECT_ID }}" >> .env
          echo "DATASTORE_EMULATOR_HOST=${{ secrets.DATASTORE_EMULATOR_HOST }}" >> .env
          echo "DATASTORE_EMULATOR_HOST_PATH=${{ secrets.DATASTORE_EMULATOR_HOST_PATH }}" >> .env
          echo "DATASTORE_HOST=${{ secrets.DATASTORE_HOST }}" >> .env
          echo "DATASTORE_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> .env
        working-directory: web
        
      #- name: Start local datastore emulator
      #  run: |      
      #    gcloud beta emulators datastore start --no-store-on-disk --quiet &
      #  working-directory: web
      #  env:
      #    GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      #    GCP_KEY_FILE_NAME: ${{ vars.GCP_KEY_FILE_NAME }}
      #    DATASTORE_DATASET: ${{ secrets.GCP_PROJECT_ID }}
      #    DATASTORE_EMULATOR_HOST: ${{ vars.DATASTORE_EMULATOR_HOST }}
      #    DATASTORE_EMULATOR_HOST_PATH: ${{ vars.DATASTORE_EMULATOR_HOST_PATH }}
      #    DATASTORE_HOST: ${{ vars.DATASTORE_HOST }}
      #    DATASTORE_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

      - name: Run Mocha tests
        run: npm run test
        working-directory: web

      #- name: Run K6 load tests
      #  run: |
      #    k6 run --env API_BASE_URL=${NEXT_VERSION}-dot-${GCP_PROJECT_ID}.uc.r.appspot.com test/*.loadtest*.js
      #  working-directory: web

  deploy:
    needs: test
    environment: Production
    runs-on: ubuntu-latest
    steps:

      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.1
        with:
          name: revolut-api
          path: ./

      - name: Install GCP CLI
        run: |
          curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-430.0.0-linux-x86_64.tar.gz
          tar -xf google-cloud-cli-430.0.0-linux-x86_64.tar.gz
          sudo ./google-cloud-sdk/install.sh
          sudo sed -i -e 's/true/false/' /usr/lib/google-cloud-sdk/lib/googlecloudsdk/core/config.json

      - name: Configure GCP CLI
        run: gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        working-directory: web

      - name: Generate GCP credentials
        run: |
          echo "$GCP_CREDENTIALS" > ${{ vars.GCP_KEY_FILE_NAME }}.json
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        working-directory: web

      - name: Authenticate with Google Cloud
        run: |
          gcloud auth activate-service-account --key-file=./web/${{ secrets.GCP_KEY_FILE_NAME }}.json    
          
      - name: Create production .env file
        run: |
          echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> .env
          echo "GCP_KEY_FILE_NAME=${{ secrets.GCP_KEY_FILE_NAME }}" >> .env
          echo "GCP_USE_EMULATOR=false" >> .env
        working-directory: web

      - name: Get Latest Version Number
        id: get_version
        run: |
          VERSION_COUNT=$(gcloud app versions list --service=default --format="value(VERSION.ID)" --sort-by="~VERSION.ID" | wc -l)
          NEXT_VERSION=$((VERSION_COUNT + 1))
          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV

      - name: Deploy to GCP App Engine
        run: |
          gcloud app deploy --version=${NEXT_VERSION} --no-promote --no-stop-previous-version
        working-directory: web
        
        #       - name: Swap App Engine versions
#         run: | 
#           gcloud app services set-traffic default --splits=${NEXT_VERSION}=1 --quiet
